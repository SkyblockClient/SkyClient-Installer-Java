{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Nullability and data flow problems",
  "tags": [
    "JAVA",
    "CWE Top 25"
  ],
  "severity": "High",
  "comment": "Argument `SkyclientUniversal.class.getResource(\"/universal/SkyblockClient128.png\")` might be null",
  "detailsInfo": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\nExamples:\n\n    if (array.length < index) {\n      System.out.println(array[index]);\n    } // Array index is always out of bounds\n\n    if (str == null) System.out.println(\"str is null\");\n    System.out.println(str.trim());\n    // the last statement may throw an NPE\n\n    @NotNull\n    Integer square(@Nullable Integer input) {\n        // the method contract is violated\n        return input == null ? null : input * input;\n    }\n\n\nThe inspection behavior may be controlled by a number of annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used** option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the `@Nullable` annotation. You can also configure nullability annotations using the **Configure Annotations** button.\n* Use the **Treat non-annotated members and parameters as @Nullable** option to assume that non-annotated members can be null, so they must not be used in non-null context.\n* Use the **Report not-null required parameter with null-literal argument usages** option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a `null` literal is passed.\n* Use the **Report nullable methods that always return a non-null value** option to report methods that are annotated as `@Nullable`, but always return non-null value. In this case, it's suggested that you change the annotation to `@NotNull`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode).\n* Use the **Report problems that happen only on some code paths** option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like *exception is possible* will not be reported. The inspection will report only warnings like *exception will definitely occur*. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \\& Exceptions\" inspection.\nNow, it is split into two inspections:\n\"Constant Values\" and \"Nullability and data flow problems\".",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/io/github/koxx12dev/universal/SkyclientUniversal.java",
      "language": "JAVA",
      "line": 42,
      "offset": 42,
      "length": 72,
      "code": {
        "startLine": 40,
        "length": 72,
        "offset": 68,
        "surroundingCode": "    static {\n        try {\n            skyclientIcon = ImageIO.read(SkyclientUniversal.class.getResource(\"/universal/SkyblockClient128.png\"));\n        } catch (IOException e) {\n            e.printStackTrace();"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "DataFlowIssue"
  },
  "hash": "7aae0fdaba2bf1b0612d40b67f314b4836b0a6d95252b1876741bca7bb0e5165"
},{
  "tool": "Code Inspection",
  "category": "Memory",
  "type": "Inner class may be 'static'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Inner class `Warning` may be 'static'",
  "detailsInfo": "Reports inner classes that can be made `static`.\n\nA `static` inner class does not keep an implicit reference to its enclosing instance.\nThis prevents a common cause of memory leaks and uses less memory per instance of the class.\n\n**Example:**\n\n\n      public class Outer {\n        class Inner { // not static\n          public void foo() {\n            bar(\"x\");\n          }\n\n          private void bar(String string) {}\n        }\n      }\n\nAfter the quick-fix is applied:\n\n\n      public class Outer {\n        static class Inner {\n          public void foo() {\n            bar(\"x\");\n          }\n\n          private void bar(String string) {}\n        }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/io/github/koxx12dev/universal/gson/ModData.java",
      "language": "JAVA",
      "line": 191,
      "offset": 18,
      "length": 7,
      "code": {
        "startLine": 189,
        "length": 7,
        "offset": 24,
        "surroundingCode": "    }\n\n    public class Warning {\n\n        public String[] lines;"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "InnerClassMayBeStatic"
  },
  "hash": "ead6ab0c8ca03775afb2a0e24f5084897740f35822411a7f5d1404163aad2420"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Suspicious indentation after control statement without braces",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Suspicious indentation after 'if' statement",
  "detailsInfo": "Reports suspicious indentation of statements after a control statement without braces.\n\n\nSuch indentation can make it look like the statement is inside the control statement,\nwhen in fact it will be executed unconditionally after the control statement.\n\n**Example:**\n\n\n      class Bar {\n          void foo(int i) {\n              if (i == 0)\n                  System.out.println(\"foo\");\n                  System.out.println(\"bar\"); // warning\n              if (i == 1);\n                  System.out.println(\"great\"); // warning\n              if (i == 42)\n                  System.out.println(\"answer\");\n                      System.out.println(\"question\"); // warning\n          }\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/io/github/koxx12dev/universal/utils/Http.java",
      "language": "JAVA",
      "line": 79,
      "offset": 1,
      "length": 8,
      "code": {
        "startLine": 77,
        "length": 8,
        "offset": 65,
        "surroundingCode": "        //noinspection deprecation\n        if (toEncode == null)\n        return null;\n\n        StringBuilder sb = new StringBuilder();"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "SuspiciousIndentAfterControlStatement"
  },
  "hash": "f08a9964fa83094b72fbccd943fa43707240bc7f3c645ba67d6a2f848c61d2c2"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.google.common.hash.Hashing' is marked unstable with @Beta",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/io/github/koxx12dev/universal/guis/Installer.java",
      "language": "JAVA",
      "line": 143,
      "offset": 63,
      "length": 7,
      "code": {
        "startLine": 141,
        "length": 7,
        "offset": 177,
        "surroundingCode": "                                        if (mod2.hash != null) {\n                                            try {\n                                                String hash = Hashing.md5().hashBytes(Files.toByteArray(new File(SkyclientUniversal.skyclient + \"/mods/\" + mod2.file))).toString();\n                                                if (!hash.equals(mod2.hash)) {\n                                                    System.out.println(\"Hash of \" + mod2.getDisplay() + \" is incorrect, deleting and downloading again\");"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "59bac2bdd0641f164f082007ec70342f2f98dc5364dd77d6bca8eed91a01c9c6"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'md5()' is declared in unstable class 'com.google.common.hash.Hashing' marked with @Beta",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/io/github/koxx12dev/universal/guis/Installer.java",
      "language": "JAVA",
      "line": 99,
      "offset": 59,
      "length": 3,
      "code": {
        "startLine": 97,
        "length": 3,
        "offset": 148,
        "surroundingCode": "                            if (mod.hash != null) {\n                                try {\n                                    String hash = Hashing.md5().hashBytes(Files.toByteArray(new File(SkyclientUniversal.skyclient + \"/mods/\" + mod.file))).toString();\n                                    if (!hash.equals(mod.hash)) {\n                                        System.out.println(\"Hash of \" + mod.getDisplay() + \" is incorrect, deleting and downloading again\");"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "6b6744db277497a16e001b99dad6813fed004501247d4b9e0f301a5e4b5e9d3f"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'toByteArray(java.io.File)' is marked unstable with @Beta",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/io/github/koxx12dev/universal/guis/Installer.java",
      "language": "JAVA",
      "line": 99,
      "offset": 81,
      "length": 11,
      "code": {
        "startLine": 97,
        "length": 11,
        "offset": 170,
        "surroundingCode": "                            if (mod.hash != null) {\n                                try {\n                                    String hash = Hashing.md5().hashBytes(Files.toByteArray(new File(SkyclientUniversal.skyclient + \"/mods/\" + mod.file))).toString();\n                                    if (!hash.equals(mod.hash)) {\n                                        System.out.println(\"Hash of \" + mod.getDisplay() + \" is incorrect, deleting and downloading again\");"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "881403ce03baef93b853e7623996ab60b6dd6f8d2887234cbbd82fc39e7532eb"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'md5()' is declared in unstable class 'com.google.common.hash.Hashing' marked with @Beta",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/io/github/koxx12dev/universal/guis/Installer.java",
      "language": "JAVA",
      "line": 143,
      "offset": 71,
      "length": 3,
      "code": {
        "startLine": 141,
        "length": 3,
        "offset": 185,
        "surroundingCode": "                                        if (mod2.hash != null) {\n                                            try {\n                                                String hash = Hashing.md5().hashBytes(Files.toByteArray(new File(SkyclientUniversal.skyclient + \"/mods/\" + mod2.file))).toString();\n                                                if (!hash.equals(mod2.hash)) {\n                                                    System.out.println(\"Hash of \" + mod2.getDisplay() + \" is incorrect, deleting and downloading again\");"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "b17229da4658f771f7b99e735a3ce6ee8aa84268b583e336d7085df15433e7e0"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'toByteArray(java.io.File)' is marked unstable with @Beta",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/io/github/koxx12dev/universal/guis/Installer.java",
      "language": "JAVA",
      "line": 143,
      "offset": 93,
      "length": 11,
      "code": {
        "startLine": 141,
        "length": 11,
        "offset": 207,
        "surroundingCode": "                                        if (mod2.hash != null) {\n                                            try {\n                                                String hash = Hashing.md5().hashBytes(Files.toByteArray(new File(SkyclientUniversal.skyclient + \"/mods/\" + mod2.file))).toString();\n                                                if (!hash.equals(mod2.hash)) {\n                                                    System.out.println(\"Hash of \" + mod2.getDisplay() + \" is incorrect, deleting and downloading again\");"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "c61196c347d1c1be0c343d1083f6563e5a0b797064c49ff047b03fe9d2aec166"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.google.common.hash.Hashing' is marked unstable with @Beta",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/io/github/koxx12dev/universal/guis/Installer.java",
      "language": "JAVA",
      "line": 99,
      "offset": 51,
      "length": 7,
      "code": {
        "startLine": 97,
        "length": 7,
        "offset": 140,
        "surroundingCode": "                            if (mod.hash != null) {\n                                try {\n                                    String hash = Hashing.md5().hashBytes(Files.toByteArray(new File(SkyclientUniversal.skyclient + \"/mods/\" + mod.file))).toString();\n                                    if (!hash.equals(mod.hash)) {\n                                        System.out.println(\"Hash of \" + mod.getDisplay() + \" is incorrect, deleting and downloading again\");"
      }
    }
  ],
  "attributes": {
    "module": "project.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "e8914cc6d15408c3c31686bed40141e3009ae8ee05e151e4cee21cc7b1d4f85e"
}]}